{"name": "test_hebrew_email_valid_password", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".login\"}\n  (Session info: chrome=104.0.5112.81)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00F978B3+2193587]\n\tOrdinal0 [0x00F30681+1771137]\n\tOrdinal0 [0x00E441A8+803240]\n\tOrdinal0 [0x00E724A0+992416]\n\tOrdinal0 [0x00E7273B+993083]\n\tOrdinal0 [0x00E9F7C2+1177538]\n\tOrdinal0 [0x00E8D7F4+1103860]\n\tOrdinal0 [0x00E9DAE2+1170146]\n\tOrdinal0 [0x00E8D5C6+1103302]\n\tOrdinal0 [0x00E677E0+948192]\n\tOrdinal0 [0x00E686E6+952038]\n\tGetHandleVerifier [0x01240CB2+2738370]\n\tGetHandleVerifier [0x012321B8+2678216]\n\tGetHandleVerifier [0x010217AA+512954]\n\tGetHandleVerifier [0x01020856+509030]\n\tOrdinal0 [0x00F3743B+1799227]\n\tOrdinal0 [0x00F3BB68+1817448]\n\tOrdinal0 [0x00F3BC55+1817685]\n\tOrdinal0 [0x00F45230+1856048]\n\tBaseThreadInitThunk [0x76A86739+25]\n\tRtlGetFullPathName_UEx [0x779F90AF+1215]\n\tRtlGetFullPathName_UEx [0x779F907D+1165]", "trace": "account = {'email': 'tamar.samara@gmail.com', 'password': '12345'}\n\n    @pytest.mark.failed\n    def test_hebrew_email_valid_password(account):\n        \"\"\"\n        Check hebrew email and valid password\n        Error message: \"Invalid email address.\"\n        failed\n        \"\"\"\n        logging.info(\"Successful Login\")\n        logging.warning(\"Error message: An email address required.\")\n>       assert check_account(\"אשצשרץדשצשרש@עצשןךץבםצ\", account[\"password\"])\n\ntests\\test_page_authentication.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_page_authentication.py:30: in check_account\n    driver = AuthenticationPage(dress_driver.click_sign_in())\npages\\buyDressPage.py:35: in click_sign_in\n    self._driver.find_element(*self.locator[\"SIGNIN_BUTTON\"]).click()\nC:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:857: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\nC:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F9D58DA980>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...unk [0x76A86739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x779F90AF+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x779F907D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".login\"}\nE         (Session info: chrome=104.0.5112.81)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00F978B3+2193587]\nE       \tOrdinal0 [0x00F30681+1771137]\nE       \tOrdinal0 [0x00E441A8+803240]\nE       \tOrdinal0 [0x00E724A0+992416]\nE       \tOrdinal0 [0x00E7273B+993083]\nE       \tOrdinal0 [0x00E9F7C2+1177538]\nE       \tOrdinal0 [0x00E8D7F4+1103860]\nE       \tOrdinal0 [0x00E9DAE2+1170146]\nE       \tOrdinal0 [0x00E8D5C6+1103302]\nE       \tOrdinal0 [0x00E677E0+948192]\nE       \tOrdinal0 [0x00E686E6+952038]\nE       \tGetHandleVerifier [0x01240CB2+2738370]\nE       \tGetHandleVerifier [0x012321B8+2678216]\nE       \tGetHandleVerifier [0x010217AA+512954]\nE       \tGetHandleVerifier [0x01020856+509030]\nE       \tOrdinal0 [0x00F3743B+1799227]\nE       \tOrdinal0 [0x00F3BB68+1817448]\nE       \tOrdinal0 [0x00F3BC55+1817685]\nE       \tOrdinal0 [0x00F45230+1856048]\nE       \tBaseThreadInitThunk [0x76A86739+25]\nE       \tRtlGetFullPathName_UEx [0x779F90AF+1215]\nE       \tRtlGetFullPathName_UEx [0x779F907D+1165]\n\nC:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchElementException"}, "description": "\n    Check hebrew email and valid password\n    Error message: \"Invalid email address.\"\n    failed\n    ", "attachments": [{"name": "log", "source": "e8970deb-567a-4a02-9bd5-3ab12774f1c0-attachment.txt", "type": "text/plain"}], "start": 1660854282076, "stop": 1660854285756, "uuid": "360401fa-b011-4940-b707-8f1f3f8b7331", "historyId": "7e127d3bcfa4cc30a924f945e4f7160c", "testCaseId": "47057325e8e0681ab6534b1dd8207e65", "fullName": "tests.test_page_authentication#test_hebrew_email_valid_password", "labels": [{"name": "tag", "value": "failed"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_page_authentication"}, {"name": "host", "value": "tamar1"}, {"name": "thread", "value": "25568-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_page_authentication"}]}